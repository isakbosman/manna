name: Frontend Deploy

on:
  push:
    branches: [main]
    paths: ['packages/frontend/**']
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: manna/frontend

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './packages/frontend'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./packages/frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'packages/frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run security audit
        run: npm run security:audit

      - name: Build application
        run: npm run build:prod

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: packages/frontend/.next

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-test]
    outputs:
      image: ${{ steps.image.outputs.image }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./packages/frontend
          file: ./packages/frontend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker]
    environment:
      name: staging
      url: https://staging.manna.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Deploy to staging
        run: |
          sed -i 's|image: manna-frontend:latest|image: ${{ needs.build-docker.outputs.image }}|' packages/frontend/k8s/deployment.yaml
          kubectl apply -f packages/frontend/k8s/ -n manna-staging

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/manna-frontend -n manna-staging --timeout=300s

      - name: Run health check
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/manna-frontend -n manna-staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker, deploy-staging]
    environment:
      name: production
      url: https://app.manna.com
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}

      - name: Deploy to production
        run: |
          sed -i 's|image: manna-frontend:latest|image: ${{ needs.build-docker.outputs.image }}|' packages/frontend/k8s/deployment.yaml
          kubectl apply -f packages/frontend/k8s/ -n manna

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/manna-frontend -n manna --timeout=600s

      - name: Run smoke tests
        run: |
          # Add smoke tests here
          curl -f https://app.manna.com/api/health || exit 1