version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: manna-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - manna-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: manna-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_prod:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    ports:
      - '6379:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - manna-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Backend API (Production)
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: production
    container_name: manna-backend-prod
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - PLAID_CLIENT_ID=${PLAID_CLIENT_ID}
      - PLAID_SECRET=${PLAID_SECRET}
      - PLAID_ENV=${PLAID_ENV:-production}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    ports:
      - '8000:8000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - manna-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'

  # Frontend Dashboard (Production)
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      target: production
    container_name: manna-frontend-prod
    environment:
      - BACKEND_URL=http://backend:8000
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - PLAID_CLIENT_ID=${PLAID_CLIENT_ID}
      - PLAID_SECRET=${PLAID_SECRET}
      - PLAID_ENV=${PLAID_ENV:-production}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    ports:
      - '8501:8501'
    depends_on:
      - backend
      - postgres
      - redis
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8501']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - manna-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: manna-nginx-prod
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - manna-network

volumes:
  postgres_data_prod:
  redis_data_prod:

networks:
  manna-network:
    driver: bridge
