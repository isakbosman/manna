import { api } from '@/lib/api'\n\nexport interface Transaction {\n  id: string\n  account_id: string\n  plaid_transaction_id?: string\n  amount: number\n  date: string\n  description: string\n  category?: string\n  subcategory?: string\n  merchant_name?: string\n  account_owner?: string\n  is_pending: boolean
  notes?: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface TransactionFilters {\n  account_id?: string\n  category?: string\n  date_from?: string\n  date_to?: string\n  amount_min?: number\n  amount_max?: number\n  search?: string\n  is_pending?: boolean\n  limit?: number\n  offset?: number\n}\n\nexport interface TransactionStats {\n  total_income: number\n  total_expenses: number\n  net_income: number\n  transaction_count: number\n  avg_transaction_amount: number\n}\n\nexport const transactionsApi = {\n  // Get all transactions with optional filters\n  getTransactions: async (filters?: TransactionFilters): Promise<{\n    transactions: Transaction[]\n    total: number\n  }> => {\n    const params = new URLSearchParams()\n    \n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          params.append(key, value.toString())\n        }\n      })\n    }\n    \n    return api.get(`/api/v1/transactions?${params.toString()}`)\n  },\n\n  // Get a specific transaction by ID\n  getTransaction: async (id: string): Promise<Transaction> => {\n    return api.get(`/api/v1/transactions/${id}`)\n  },\n\n  // Update a transaction\n  updateTransaction: async (id: string, updates: Partial<Transaction>): Promise<Transaction> => {\n    return api.put(`/api/v1/transactions/${id}`, updates)\n  },\n\n  // Delete a transaction\n  deleteTransaction: async (id: string): Promise<void> => {\n    return api.delete(`/api/v1/transactions/${id}`)\n  },\n\n  // Bulk update transactions\n  bulkUpdateTransactions: async (updates: {\n    transaction_ids: string[]\n    updates: Partial<Transaction>\n  }): Promise<Transaction[]> => {\n    return api.put('/api/v1/transactions/bulk', updates)\n  },\n\n  // Get transaction statistics\n  getTransactionStats: async (filters?: {\n    date_from?: string\n    date_to?: string\n    account_id?: string\n  }): Promise<TransactionStats> => {\n    const params = new URLSearchParams()\n    \n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          params.append(key, value.toString())\n        }\n      })\n    }\n    \n    return api.get(`/api/v1/transactions/stats?${params.toString()}`)\n  },\n\n  // Sync transactions from Plaid\n  syncTransactions: async (accountId?: string): Promise<{\n    synced_count: number\n    new_transactions: number\n    updated_transactions: number\n  }> => {\n    return api.post('/api/v1/transactions/sync', { account_id: accountId })\n  },\n\n  // Categorize transactions using ML\n  categorizeTransactions: async (transactionIds: string[]): Promise<{\n    categorized_count: number\n    transactions: Transaction[]\n  }> => {\n    return api.post('/api/v1/transactions/categorize', {\n      transaction_ids: transactionIds\n    })\n  },\n\n  // Export transactions\n  exportTransactions: async (filters?: TransactionFilters, format: 'csv' | 'xlsx' = 'csv'): Promise<void> => {\n    const params = new URLSearchParams()\n    params.append('format', format)\n    \n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          params.append(key, value.toString())\n        }\n      })\n    }\n    \n    return api.download(`/api/v1/transactions/export?${params.toString()}`, `transactions.${format}`)\n  }\n}"