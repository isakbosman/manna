import * as React from 'react'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport { cn } from '@/lib/utils'\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary-600 text-white hover:bg-primary-700',\n        destructive: 'bg-error-600 text-white hover:bg-error-700',\n        outline: 'border border-neutral-300 bg-background hover:bg-neutral-50 hover:text-neutral-900',\n        secondary: 'bg-secondary-100 text-secondary-900 hover:bg-secondary-200',\n        ghost: 'hover:bg-neutral-100 hover:text-neutral-900',\n        link: 'text-primary-600 underline-offset-4 hover:underline',\n        success: 'bg-success-600 text-white hover:bg-success-700',\n        warning: 'bg-warning-600 text-white hover:bg-warning-700',\n      },\n      size: {\n        default: 'h-10 px-4 py-2',\n        sm: 'h-9 rounded-md px-3',\n        lg: 'h-11 rounded-md px-8',\n        xl: 'h-12 rounded-md px-10',\n        icon: 'h-10 w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  loading?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, loading, disabled, children, ...props }, ref) => {\n    const isDisabled = disabled || loading\n    \n    return (\n      <button\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        disabled={isDisabled}\n        {...props}\n      >\n        {loading && (\n          <div className=\"mr-2 h-4 w-4 animate-spin rounded-full border-b-2 border-current\" />\n        )}\n        {children}\n      </button>\n    )\n  }\n)\nButton.displayName = 'Button'\n\nexport { Button, buttonVariants }"